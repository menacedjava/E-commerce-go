// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ali Jabbar",
            "email": "alijabbar0034@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/order": {
            "get": {
                "description": "Retrieves a list of all orders.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get All Orders",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"All orders\", \"orders\": []}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Create Order",
                "parameters": [
                    {
                        "description": "Order object",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"message\": \"Created Successfully\", \"id\": string}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/order/shipping": {
            "post": {
                "description": "Creates a new shipping address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shipping"
                ],
                "summary": "Create Shipping Address",
                "parameters": [
                    {
                        "description": "Shipping object",
                        "name": "shipping",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Shipping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Created Successfully\", \"_id\": string}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Bad Request\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/order/{id}": {
            "get": {
                "description": "Retrieves an order by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Success\", \"order\": object}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the status of an order by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order object",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Updated successfully\", \"count\": integer}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Order Status is empty\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/product/": {
            "get": {
                "description": "Retrieves a list of all products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get All Products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price less than",
                        "name": "lt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Price greater than",
                        "name": "gt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Color filter",
                        "name": "color",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"All products\", \"products\": []}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": "Product Price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Product Colors",
                        "name": "color",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product Images",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"message\": \"Created Product Successfully\", \"productId\": string, \"id\": string}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Bad Request\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Error during creation of product\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "description": "Retrieves product information by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get Product By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Get product by id\", \"product\": object}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "{\"message\": \"No Product Found\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates product information by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product object",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Updated Successfully\", \"count\": integer}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Bad Request\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a product by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Product Deleted\", \"count\": integer}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/review": {
            "get": {
                "description": "Retrieves a list of all reviews.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Get All Reviews",
                "responses": {
                    "200": {
                        "description": "{\"total\": integer, \"reviews\": []}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/review/{id}": {
            "get": {
                "description": "Retrieves a review by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Get Review By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Got successfully\", \"review\": object}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a review by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Update Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review object",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Review"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"updatedCount\": integer}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Provide the valid data\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new review for a product by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Create Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review object",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Review"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Review added successfully\", \"id\": string}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Invalid data\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Error during creating review\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a review by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Delete Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"count\": integer}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Please Provide ID\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Internal Server Error\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Retrieves a list of all users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All Users",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"All user list\", \"total\": integer, \"users\": []}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "{\"message\": \"No users Found\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates user information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Updated successfully\", \"count\": integer}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Invalid info\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "{\"message\": \"Error during updating user\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "description": "Logs out the user by removing the token cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Logout User",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Logout successfully\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the profile information of the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"user\": \"User profile information\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "{\"message\": \"Unauthorized\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Responds with the message and token books as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Login Successfully\", \"token\": string}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "{\"message\": \"Inavalid data\"} \"Bad request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "{\"message\": \"No user Found\"} \"Unauthorized er Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Retrieves user information by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User By Id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"User information\"}",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "{\"message\": \"No user Found\"}",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Order": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "string"
                },
                "shipping_id": {
                    "type": "string"
                },
                "shipping_price": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "total_price": {
                    "type": "integer"
                }
            }
        },
        "models.Product": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "averageReview": {
                    "type": "number"
                },
                "color": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "models.Review": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "productId": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Shipping": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "f_name": {
                    "type": "string"
                },
                "l_name": {
                    "type": "string"
                },
                "phone_no": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "f_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "l_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_no": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "13.53.115.94",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Gin Ecommerce Web",
	Description:      "An Ecommerce service API in Go using Gin framework.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

